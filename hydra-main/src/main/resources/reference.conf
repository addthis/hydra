include "bundle-logs"

hydra.metrics {
  enable = true
  # legacy system property support
  enable = ${?ganglia.enable}

  config.output {
    type = ganglia
    hosts { host = localhost, port = 8649}
  }
}

hydra.prometheus {
  # spawn.port = ${com.addthis.hydra.job.web.SpawnServiceConfiguration.webPort} # 5052
  # minion.port = ${minion.web.port}  5555 in default cluster conf
  mqmaster.port = 9242
  # mqworker.port = ${com.addthis.hydra.query.MeshQueryWorker.webPort} # 2223
  config = "./config/prometheus.yaml"
}

hydra.auth.timeout {
  login = 1 day
  sudo = 15 minutes
}

plugins {
  executables {
    spawn: com.addthis.hydra.job.spawn.Spawn
    minion: com.addthis.hydra.minion.Minion
    mqmaster: com.addthis.hydra.query.web.QueryServer
    mqworker: com.addthis.hydra.query.MeshQueryWorker
    qutil: com.addthis.hydra.query.util.QueryChannelUtil
    task: com.addthis.hydra.task.run.TaskRunner
    fmux: com.addthis.muxy.Main
    cliquery: com.addthis.hydra.data.query.CLIQuery
    printbundles: com.addthis.hydra.task.util.BundleStreamPeeker
    mesh: com.addthis.meshy.Main
    zookeeper: org.apache.zookeeper.server.quorum.QuorumPeerMain
    zk: org.apache.zookeeper.ZooKeeperMain
    dbspace: com.sleepycat.je.util.DbSpace
    mark: com.addthis.hydra.task.source.MarkDB
    mesh-http: com.addthis.hydra.meshy.http.MeshyHttp

    _show-banner = true
    _banners { include "banners" }
  }
  job alerts {
    _class: com.addthis.hydra.job.alert.AbstractJobAlert
    0: types.OnErrorJobAlert
    1: types.OnCompleteJobAlert
    2: types.RuntimeExceededJobAlert
    3: types.RekickTimeoutJobAlert
    4: types.SplitCanaryJobAlert
    5: types.MapCanaryJobAlert
    6: types.BundleCanaryJobAlert
    7 { _class: 8, canaryPath: "/log/*" }
    8: types.FileCountJobAlert
    "on error": "0"
    "on complete": "1"
    "runtime exceeded": "2"
    "rekick timeout": "3"
    "split canary": "4"
    "map canary": "5"
    "bundle canary": "6"
    "logfile count": "7"
    "file count": "8"
  }
  authentication {
    _class: com.addthis.hydra.job.auth.AuthenticationManager
    allowall: AuthenticationManagerAllowAll
    denyall: AuthenticationManagerDenyAll
    filewatch: AuthenticationManagerFileWatch
    localuser: AuthenticationManagerLocalUser
    nested: AuthenticationManagerNested
    static: AuthenticationManagerStatic
  }
  authorization {
    _class: com.addthis.hydra.job.auth.AuthorizationManager
    allowall: AuthorizationManagerAllowAll
    basic: AuthorizationManagerBasic
  }
  job expander {
    _class: com.addthis.hydra.job.JobConfigExpander
  }
  hostLocationInitializer {
    _class: com.addthis.hydra.minion.HostLocationInitializer
    systemProperty: SystemPropertyHostLocationInitializer
    file: FileReaderHostLocationInitializer
    hostnameMatcher: HostnameMatcherHostLocationInitializer
  }
}

com.addthis.hydra.job.alert.types.FileCountJobAlert {
  sigma = 1.0
}

com.addthis.hydra {
  job {
    spawn {
      Spawn {
        include "spawn"
      }
      SpawnState {
        quiescentLevel = 0
        disabledHosts = []
      }
    }
    web {
      SpawnServiceConfiguration {
        webPort = 5052
        webPortSSL = 5053
        requireSSL = true
        defaultSSL = true
        authTimeout = ${hydra.auth.timeout.login}
        sudoTimeout = ${hydra.auth.timeout.sudo}
        groupUpdateInterval = 30 seconds
        groupLogDir = "./log/spawn-stats/groups"
        groupLogInterval = 10 minutes
        maxLogFileLines = 10000
      }
    }
  }

  minion.Minion {
    dataDir = minion
    dataDir = ${?com.addthis.hydra.minion.Minion.dataDir} # legacy system property
    queueType = rabbit
    hostLocationInitializer.type = systemProperty
  }
  job.alert.types {
    OnErrorJobAlert: ${hydra.AbstractJobAlertDefaults}
    OnCompleteJobAlert: ${hydra.AbstractJobAlertDefaults}
    RuntimeExceededJobAlert: ${hydra.AbstractJobAlertDefaults}
    RekickTimeoutJobAlert: ${hydra.AbstractJobAlertDefaults}
    SplitCanaryJobAlert: ${hydra.AbstractJobAlertDefaults}
    MapCanaryJobAlert: ${hydra.AbstractJobAlertDefaults}
    BundleCanaryJobAlert: ${hydra.AbstractJobAlertDefaults}
    FileCountJobAlert: ${hydra.AbstractJobAlertDefaults}
  }
  job.auth {
    AuthorizationManagerBasic {
      sudoCache = {policy = "WRITE", timeout = ${hydra.auth.timeout.sudo}}
      groupModifyPermissions = true
    }
    AuthenticationManagerLocalUser {
      tokenCache = {policy = "WRITE", timeout = ${hydra.auth.timeout.login}}
    }
    AuthenticationManagerStatic {
      adminGroups = []
      adminUsers =  []
      users = {}
    }
  }
  query.web.QueryServer {
    webPort = 2222
    webPort = ${?qmaster.web.port} # legacy system property
    queryThreads = 16
    queryThreads = ${?meshSourceAggregator.frameReader.threads} # legacy system property
    queryThreadFactory { daemon = true, nameFormat = "frame-reader-%d" }
  }
  query.MeshQueryWorker {
    webPort = 2223
    webPort = ${?qworker.web.port} # legacy system property
    root = streams
    root = ${?qmaster.mesh.root} # pull from legacy query master setting
    bindAddress = 2601
    bindAddress = ${?qmaster.mesh.port} # pull from legacy query master setting
    peers = ""
  }
  meshy.http.MeshyHttp {
    serverPort: 6001
    serverPort: ${?mesh.http.port}
    meshHost: localhost
    meshHost: ${?mesh.host}
    meshPort: ${?mesh.port}
  }

  util.BundleReporter {
    name   = ${com.addthis.hydra.task.output.GangliaOutput.name}
    value  = ${com.addthis.hydra.task.output.GangliaOutput.value}
    group  = ${com.addthis.hydra.task.output.GangliaOutput.group}
    units  = ${com.addthis.hydra.task.output.GangliaOutput.units}
    period = 60 seconds
  }

}

hydra.AbstractJobAlertDefaults {
  description = ""
  activeJobs = {}
  activeTriggerTimes = {}
  delay = 0
  suppressChanges = FALSE
}