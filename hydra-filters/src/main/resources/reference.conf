plugins {
  bundle-filter {
    _field: op
    _class: com.addthis.hydra.data.filter.bundle.BundleFilter
    _array: chain
    # this allows eliding 'filter'
    _default: { _class: field, _primary: filter }
    append: BundleFilterAppend
    chain: { _class: BundleFilterChain, _primary: filter }
    clear: BundleFilterClear
    concat: BundleFilterConcat
    condition: BundleFilterCondition
    contains: BundleFilterContains
    debug: BundleFilterDebugPrint
    defaults: BundleFilterDefaults
    equals: BundleFilterEquals
    error: BundleFilterError
    eval-java: BundleFilterEvalJava
    field: BundleFilterField
    # Identical to <code>field</code> but the result of the filter is not used or available anywhere in the bundle.
    test-field { _class: field, _primary: filter, to: {/dev/null {}}}
    first: BundleFilterFirstValue
    http: BundleFilterHttp
    json: BundleFilterJSON
    limit: BundleFilterLimit
    map: BundleFilterMap
    map-extract: BundleFilterMapExtract
    not: BundleFilterNot
    num: BundleFilterNum
    random-field: BundleFilterRandomField
    recent1: BundleFilterRecent1
    recent2: BundleFilterRecent2
    sleep: BundleFilterSleep
    template: BundleFilterTemplate
    test: BundleFilterTest
    time: BundleFilterTime
    time-range: BundleFilterTimeRange
    try: BundleFilterTry
    url: BundleFilterURL
    value: BundleFilterValue
  }

  value-filter {
    _field: op
    _class: com.addthis.hydra.data.filter.value.ValueFilter
    _array: chain
    band-pass: ValueFilterBandPass
    base64: ValueFilterBase64
    baseconv: ValueFilterBaseConv
    bit-split: ValueFilterBitsToArray
    case: ValueFilterCase
    cat: ValueFilterCat
    chain: { _class: ValueFilterChain, _primary: filter }
    contains: { _class: ValueFilterContains, _primary: value }
    count: { _class: ValueFilterCounter, _primary: format }
    create-map: ValueFilterCreateMap
    date-range-length: ValueFilterDateRangeLength
    default { _class: ValueFilterDefault, _primary: value }
    empty: ValueFilterEmpty
    error: { _class: ValueFilterError, _primary: message }
    eval-java: ValueFilterEvalJava
    exclude: { _class: ValueFilterExclude, _primary: value }
    glob: { _class: ValueFilterGlob, _primary: pattern }
    grepTags: ValueFilterGrepTags
    hash: ValueFilterHash
    httpget: ValueFilterHttpGet
    index: { _class: ValueFilterIndex, _primary: index }
    inequality: ValueFilterInequality
    intbase: ValueFilterIntBase
    javascript: ValueFilterJavascript
    join: { _class: ValueFilterJoin, _primary: join }
    json: ValueFilterJSON
    length: ValueFilterLength
    list-apply: { _class: ValueFilterListApply, _primary: elementFilter }
    map: { _class: ValueFilterMap, _primary: map }
    map-subset: ValueFilterMapSubset
    map-value: ValueFilterMapValue
    md5: ValueFilterMD5
    mod: { _class: ValueFilterMod, _primary: mod }
    not: { _class: ValueFilterNot }
    pad: { _class: ValueFilterPad, _primary: left }
    pass: ValueFilterPass
    pretty-print: ValueFilterPrettyPrint
    random: ValueFilterRandom
    range: ValueFilterRange
    regex: { _class: ValueFilterRegex, _primary: pattern, _inline: true }
    replace: ValueFilterReplace
    require: { _class: ValueFilterRequire, _primary: value }
    reverse: ValueFilterReverse
    seen: ValueFilterSeen
    serial: ValueFilterSerial
    set: { _class: ValueFilterSet, _primary: value }
    slice: ValueFilterSlice
    sort: ValueFilterSort
    split: { _class: ValueFilterSplit, _primary: split }
    string-slice: ValueFilterStringSlice
    time-format: ValueFilterTimeFormat
    time-range: ValueFilterTimeRange
    trim: ValueFilterTrim
  }

  closeable bundle filter {
    _field: op
    _array: chain
    chain: com.addthis.hydra.data.filter.closeablebundle.CloseableBundleFilterChain
    delete: com.addthis.hydra.data.filter.closeablebundle.CloseableBundleFilterDelete
    set: com.addthis.hydra.data.filter.closeablebundle.CloseableBundleFilterSet
  }

}

# 'hydra.validation' is used to override the global config namespace only during
# validation of job configs in certain spawn methods (see: JobsResource). It is
# primarily intended to allow certain expensive object construction steps to be
# skipped when they are not needed.
hydra.validation.plugins {
  bundle-filter {
    http: "AbstractBundleFilterHttp$ValidationBundleFilterHttp"
  }

  closeable bundle filter {
    delete: com.addthis.hydra.data.filter.closeablebundle.BundleFilterAlwaysValidates
  }

  value-filter {
    validate-require-exclude._class: "AbstractMatchStringFilter$ValidationOnly"
    exclude._class: validate-require-exclude
    require._class: validate-require-exclude
    httpget._class: "ValueFilterHttpGet$ValidationOnly"
    javascript._class: "ValueFilterJavascript$ValidationOnly"
    map._class: "ValueFilterMap$ValidationOnly"
  }
}

com.addthis.hydra.data.filter {
  bundle {
    BundleFilterTimeRange {
      defaultExit: true
    }
  }
  value {
    ValueFilterCounter {
      increment: 1
    }
    ValueFilterExclude {
      urlRetries: 5
      urlTimeout: 60000
    }
    ValueFilterRequire {
      urlRetries: 5
      urlTimeout: 60000
    }
    ValueFilterSplit {
      fixedLength: -1
      split: ","
    }
    ValueFilterTimeFormat {
      formatIn: "native"
    }
  }
}