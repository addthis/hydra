com.addthis.hydra.data.filter.bundle {
  BundleFilterTry {catch {log = caught filter failure from try block, every = 30}}
}

plugins.bundle-filter {
  try {
    _class: BundleFilterTry, _inline: true, _primary: try
  }

  # <p><span class="hydra-summary">condition with returnFilter: true.</span>
  # Refer to docs for <code>condition</code>
  # for full documentation. Example usage:</p>
  # <pre>
  # {if:{has:"SOME_FIELD"}, then:{from:"SOME_FLAG", set:"1"}, else:{from:"SOME_FLAG", set:"2"}}
  # </pre>
  if {
    _class: condition, _inline: true, _primary: if
    returnFilter: true
  }

  # <p><span class="hydra-summary">a debug command with a few simplifications.</span>
  # Logs a line every 10 seconds. Provide it with the prefix you want
  # to appear with the log line. Example:</p>
  # <pre>
  # {log = end of filtering}
  # {log:"some message"}
  # </pre>
  log {
    _class: debug, _primary: prefix, _inline: true
    maxBundles = 1, every = 10
  }

  has {
    _class: field, _primary: from
  }

  unary { _class: unary.BundleFilterUnary, _primary: filter }
  # <p><span class="hydra-summary">Identical in functionality to safely</span>,
  # except that you can have empty braces, and you have to specify the <code>field</code> filter
  # directly if you use it. Example:</p>
  # <pre>
  # {true {}}
  # {true.some-filter {}}
  # </pre>
  true { _class: unary, operation: true }
  safely { _class: unary.BundleFilterSafely }
  ignore { _class: safely }
  # <span class="hydra-summary">Bundle filter that returns false.</span>
  # Can be used with empty braces unlike "<code>then fail</code>".
  false { _class: unary, operation: false }
  # <span class="hydra-summary">Bundle filter that returns false.</span>
  # Can be used with empty braces unlike "<code>then fail</code>".
  fail { _class: false }
  then fail { _class: unary.BundleFilterThenFail }
  is { _class: unary.BundleFilterIdentity }
  invert { _class: unary.BundleFilterNegation }
  is not { _class: invert }
  isn't { _class: invert }
}

# promoted from user-filters macro, or derived therefrom
plugins.value-filter {
}

plugins.bundle-filter {
  # <p><span class="hydra-summary">field with empty.not:true</span></p>
  # usage: {is-not-empty:"UID"}
  is-not-empty { _class: field, _primary: from, filter.empty.not: true }

  # <p><span class="hydra-summary">passes bundles that are null or empty</span></p>
  # usage: {is-null-or-empty:"PXID"}
  is-null-or-empty: {_class: invert, _primary: from, filter.empty.not: true}

  # <p><span class="hydra-summary">converts unix timestamp in "TIME" field to
  # yyMMdd-HHmmss-yyww format (EST timezone) in "DATE" field</span></p>
  time-to-date {
    _class: time
    src: { field: "TIME", format: "native" }
    dst: { field: "DATE", format: "yyMMdd-HHmmss-yyww", timeZone: "EST" }
  }
  # <p><span class="hydra-summary">converts unix timestamp in "TIME" field to
  #  yyMMdd format (EST timezone) in "DATE_YMD" field</span></p>
  # formats native time value in TIME field and saves to DATE (yyMMdd-HHmmss-yyww) and DATE_YMD (yyMMdd) fields.
  time-to-date-ymd {
    _class: chain
    filter: [
      {time-to-date {}}
      {from: "DATE", to: "DATE_YMD", filter.slice.to: 6}
    ]
  }
}
