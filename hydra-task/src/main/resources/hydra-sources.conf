plugins {
  input-source {
    _class: "com.addthis.hydra.task.source.TaskDataSource"
    _array: { _class: aggregate, _primary: sources }
    aggregate: AggregateTaskDataSource
    channel: DataSourceChannel
    const: { _class: DataSourceConstant, _primary: bundles }
    empty: DataSourceEmpty
    files: DataSourceStreamFiles
    filter: DataSourceFiltered
    hashed: DataSourceHashed
    http: DataSourceHttp
    mesh2: {
      _class: DataSourceMeshy2
      markDir: marks
    }
    prefetch: DataSourcePrefetch
    query: DataSourceQuery
    range: DataSourceRange
    sorted: SortedTaskDataSource
  }

  stream-bundleizer {
    _class: "com.addthis.hydra.task.source.bundleizer.BundleizerFactory"
    channel: ChannelBundleizer
    column: ColumnBundleizer
    json: JSONBundleizer
    kv: KVBundleizer
    gson: GsonBundleizer
    regex: { _class: RegexBundleizer, _primary: regex, fields: [] }
  }
}

com.addthis.hydra.task {
  stream.StreamSourceMeshy {
    meshHost: localhost
    meshPort: 5000

    # short circuiting settings
    meshShortCircuit: true
    meshPeerThreshold: 0.95
    meshTimeOut: 2 seconds
    meshShortCircuitWaitTime: 5 seconds

    # support legacy system property paths for now
    meshShortCircuit: ${?source.mesh.find.short.circuit}
    meshTimeOut: ${?source.mesh.find.timeout}
    meshPort: ${?source.mesh.port}
    meshHost: ${?source.mesh.host}
  }

  source {
    AbstractStreamDataSource {
      buffer: 128
      pollInterval: 1 second
      pollCountdown: 1800
    }
    AbstractStreamFileDataSource {
      magicMarksNumber: 42
      workers: 2
      skipSourceExit: 0
      multiBundleReads: 1
      preOpen: 1
      format: {channel {}}
      latchTimeout: 30 seconds

      # support legacy system property paths for now
      preOpen: ${?dataSourceMeshy2.preopen}
      workers: ${?dataSourceMeshy2.workers}
      buffer: ${?dataSourceMeshy2.buffer}
      skipSourceExit: ${?dataSourceMeshy2.skipSourceExit}
      pollInterval: ${?dataSourceMeshy2.pollInterval}
      pollCountdown: ${?dataSourceMeshy2.pollCountdown}
      latchTimeout: ${?dataSourceMeshy2.timeout.sec}
    }
    DataSourceHttp {
      contentType: "application/json"
      data: {}
      format: {gson {}}
      params: {}
    }
    DataSourceQuery {
      config: {}
      queryHost: "localhost"
      queryPort = -1
      queryPort = ${?qmaster.mesh.port}
      treeDir: "data"
    }
  }
}
